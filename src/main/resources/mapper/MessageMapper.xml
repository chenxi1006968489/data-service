<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cx.springboot.dao.MessageMapper" >
  <!--<resultMap id="BaseResultMap" type="fun.linyuhong.myCommunity.com.cx.springboot.entity.Message" >-->
    <!--<constructor >-->
      <!--<idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
      <!--<arg column="from_id" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
      <!--<arg column="to_id" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
      <!--<arg column="conversation_id" jdbcType="VARCHAR" javaType="java.lang.String" />-->
      <!--<arg column="status" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
      <!--<arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />-->
    <!--</constructor>-->
  <!--</resultMap>-->
  <!--<resultMap id="ResultMapWithBLOBs" type="fun.linyuhong.myCommunity.com.cx.springboot.entity.Message" >-->
    <!--<constructor >-->
      <!--<idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
      <!--<arg column="from_id" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
      <!--<arg column="to_id" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
      <!--<arg column="conversation_id" jdbcType="VARCHAR" javaType="java.lang.String" />-->
      <!--<arg column="status" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
      <!--<arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />-->
      <!--<arg column="content" jdbcType="LONGVARCHAR" javaType="java.lang.String" />-->
    <!--</constructor>-->
  <!--</resultMap>-->
  <!--<sql id="Base_Column_List" >-->
    <!--id, from_id, to_id, conversation_id, status, create_time-->
  <!--</sql>-->
  <!--<sql id="Blob_Column_List" >-->
    <!--content-->
  <!--</sql>-->
  <!--<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >-->
    <!--select -->
    <!--<include refid="Base_Column_List" />-->
    <!--,-->
    <!--<include refid="Blob_Column_List" />-->
    <!--from message-->
    <!--where id = #{id,jdbcType=INTEGER}-->
  <!--</select>-->
  <!--<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >-->
    <!--delete from message-->
    <!--where id = #{id,jdbcType=INTEGER}-->
  <!--</delete>-->
  <!--<insert id="insert" parameterType="fun.linyuhong.myCommunity.com.cx.springboot.entity.Message" >-->
    <!--insert into message (id, from_id, to_id, -->
      <!--conversation_id, status, create_time, -->
      <!--content)-->
    <!--values (#{id,jdbcType=INTEGER}, #{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER}, -->
      <!--#{conversationId,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, -->
      <!--#{content,jdbcType=LONGVARCHAR})-->
  <!--</insert>-->
  <!--<insert id="insertSelective" parameterType="fun.linyuhong.myCommunity.com.cx.springboot.entity.Message" >-->
    <!--insert into message-->
    <!--<trim prefix="(" suffix=")" suffixOverrides="," >-->
      <!--<if test="id != null" >-->
        <!--id,-->
      <!--</if>-->
      <!--<if test="fromId != null" >-->
        <!--from_id,-->
      <!--</if>-->
      <!--<if test="toId != null" >-->
        <!--to_id,-->
      <!--</if>-->
      <!--<if test="conversationId != null" >-->
        <!--conversation_id,-->
      <!--</if>-->
      <!--<if test="status != null" >-->
        <!--status,-->
      <!--</if>-->
      <!--<if test="createTime != null" >-->
        <!--create_time,-->
      <!--</if>-->
      <!--<if test="content != null" >-->
        <!--content,-->
      <!--</if>-->
    <!--</trim>-->
    <!--<trim prefix="values (" suffix=")" suffixOverrides="," >-->
      <!--<if test="id != null" >-->
        <!--#{id,jdbcType=INTEGER},-->
      <!--</if>-->
      <!--<if test="fromId != null" >-->
        <!--#{fromId,jdbcType=INTEGER},-->
      <!--</if>-->
      <!--<if test="toId != null" >-->
        <!--#{toId,jdbcType=INTEGER},-->
      <!--</if>-->
      <!--<if test="conversationId != null" >-->
        <!--#{conversationId,jdbcType=VARCHAR},-->
      <!--</if>-->
      <!--<if test="status != null" >-->
        <!--#{status,jdbcType=INTEGER},-->
      <!--</if>-->
      <!--<if test="createTime != null" >-->
        <!--#{createTime,jdbcType=TIMESTAMP},-->
      <!--</if>-->
      <!--<if test="content != null" >-->
        <!--#{content,jdbcType=LONGVARCHAR},-->
      <!--</if>-->
    <!--</trim>-->
  <!--</insert>-->
  <!--<update id="updateByPrimaryKeySelective" parameterType="fun.linyuhong.myCommunity.com.cx.springboot.entity.Message" >-->
    <!--update message-->
    <!--<set >-->
      <!--<if test="fromId != null" >-->
        <!--from_id = #{fromId,jdbcType=INTEGER},-->
      <!--</if>-->
      <!--<if test="toId != null" >-->
        <!--to_id = #{toId,jdbcType=INTEGER},-->
      <!--</if>-->
      <!--<if test="conversationId != null" >-->
        <!--conversation_id = #{conversationId,jdbcType=VARCHAR},-->
      <!--</if>-->
      <!--<if test="status != null" >-->
        <!--status = #{status,jdbcType=INTEGER},-->
      <!--</if>-->
      <!--<if test="createTime != null" >-->
        <!--create_time = #{createTime,jdbcType=TIMESTAMP},-->
      <!--</if>-->
      <!--<if test="content != null" >-->
        <!--content = #{content,jdbcType=LONGVARCHAR},-->
      <!--</if>-->
    <!--</set>-->
    <!--where id = #{id,jdbcType=INTEGER}-->
  <!--</update>-->
  <!--<update id="updateByPrimaryKeyWithBLOBs" parameterType="fun.linyuhong.myCommunity.com.cx.springboot.entity.Message" >-->
    <!--update message-->
    <!--set from_id = #{fromId,jdbcType=INTEGER},-->
      <!--to_id = #{toId,jdbcType=INTEGER},-->
      <!--conversation_id = #{conversationId,jdbcType=VARCHAR},-->
      <!--status = #{status,jdbcType=INTEGER},-->
      <!--create_time = #{createTime,jdbcType=TIMESTAMP},-->
      <!--content = #{content,jdbcType=LONGVARCHAR}-->
    <!--where id = #{id,jdbcType=INTEGER}-->
  <!--</update>-->
  <!--<update id="updateByPrimaryKey" parameterType="fun.linyuhong.myCommunity.com.cx.springboot.entity.Message" >-->
    <!--update message-->
    <!--set from_id = #{fromId,jdbcType=INTEGER},-->
      <!--to_id = #{toId,jdbcType=INTEGER},-->
      <!--conversation_id = #{conversationId,jdbcType=VARCHAR},-->
      <!--status = #{status,jdbcType=INTEGER},-->
      <!--create_time = #{createTime,jdbcType=TIMESTAMP}-->
    <!--where id = #{id,jdbcType=INTEGER}-->
  <!--</update>-->

  <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

  <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

  <select id="selectConversationCount" resultType="int">
    select count(m.maxid) from
    (
      select MAX(id) as maxid
      from message
      where status != 2
      and from_id != 1
      and (from_id = #{userId} or to_id = #{userId})
      group by conversation_id
    ) as m
  </select>

  <select id="selectConversations" resultType="com.cx.springboot.entity.Message">
    select <include refid="selectFields" />
    from message
    where id in (
      select MAX(id)
      from message
      where status != 2
      and from_id != 1
      and (from_id = #{userId} or to_id = #{userId})
      group by conversation_id
    )
    order by id desc
    limit #{offset}, #{limit}

  </select>


  <select id="selectLetterCount" resultType="int">
     select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
  </select>


  <select id="selectLetterUnreadCount" resultType="int">
    select count(id)
    from message
    where status = 0
    and from_id != 1
    and to_id = #{userId}
    <if test="conversationId!=null">
      and conversation_id = #{conversationId}
    </if>
  </select>

  <select id="selectLetters" resultType="com.cx.springboot.entity.Message">
    select <include refid="selectFields"></include>
    from message
    where status != 2
    and from_id != 1
    and conversation_id = #{conversationId}
    order by id desc
    limit #{offset}, #{limit}
  </select>

  <update id="updateStatus">
    update message set status = #{status}
    where id in
    <foreach collection="ids" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </update>

  <insert id="insertMessage" parameterType="com.cx.springboot.entity.Message" keyProperty="id">
    insert into message(<include refid="insertFields"></include>)
    values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
  </insert>

  <select id="selectLatestNotice" resultType="com.cx.springboot.entity.Message">
    select <include refid="selectFields"></include>
    from message
    where id in (
    select max(id) from message
    where status != 2
    and from_id = 1
    and to_id = #{userId}
    and conversation_id = #{topic}
    )
  </select>

  <select id="selectById" resultType="com.cx.springboot.entity.Message">
    select <include refid="selectFields"></include>
    from message
    where Id = #{Id}
  </select>

  <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
    </select>

  <select id="selectNoticeUnreadCount" resultType="int">
    select count(id) from message
    where status = 0
    and from_id = 1
    and to_id = #{userId}
    <if test="topic!=null">
      and conversation_id = #{topic}
    </if>
  </select>

  <select id="selectNotices" resultType="com.cx.springboot.entity.Message">
    select <include refid="selectFields"></include>
    from message
    where status != 2
    and from_id = 1
    and to_id = #{userId}
    and conversation_id = #{topic}
    order by create_time desc
    limit #{offset}, #{limit}
  </select>



</mapper>